<nav class="navbar navbar-expand-sm bg-light">

    <!-- Links -->
    <ul class="navbar-nav">
      <li class="nav-item">
        <p class="nav-link" style="margin-bottom:0px; font-weight: bold">Dataset:</p>
      </li>
      <li class="nav-item">
        <select name="datasets" id="datasets" onchange="datasetChange()" class="nav-link">
            <option value="ptsd_filtered.csv">ptsd_filtered.csv</option>
            <option value="itch_tbc.csv">itch_tbc.csv</option>
            <option value="itching_in_nose_tbc_newer.csv">itching_in_nose_tbc_newer.csv</option>
            <option value="symptom-simple.csv">symptom-simple.csv</option>
            <option value="custom">Custom Dataset</option>
        </select>
      </li>
      <li class="nav-item" id="customDataUpload" style="display:none">
        <input type="file" name="custom-dataset" id="customDataset" onchange="openFile(event)" style="max-width:220px;">
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/">Overview</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/statistics">Statistics</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/full-calendar">Calendar Detailed</a>
      </li>
      <li class="nav-item">
          <a class="nav-link" href="/monthly-breakdown">Calendar Year</a>
      </li>
      <li class="nav-item">
          <a class="nav-link" href="/settings"><img src="images/gear.svg" alt="settings" style="max-width:15px;"></a>
      </li>
    </ul>
  
</nav>

<script type="text/javascript">
  var timezone = getTimezone();

  var openFile = function(event) {
    if (window.File && window.FileReader && window.FileList && window.Blob) {
      var input = event.target;

      var reader = new FileReader();
      reader.onloadend = function(evt) {
        if (evt.target.readyState == FileReader.DONE) {        
          var allData = [];
          d3.csvParseRows(reader.result).map(function(row) {      
            allData.push({
              date: row[0],
              timezone: row[1]
            });
          });
          console.log(allData)
          rawData = allData;
          var savedObject = {
            "annotations": [],
            "observations": [],
            "data": allData
          };

          window.localStorage.setItem('custom-data', JSON.stringify(savedObject));
          window.localStorage.setItem('custom-date', (new Date()).getTime());
          
          removeAllVisualizations();
          var tz = getTimezone();
				  data = processData(tz.value, rawData);
          createVisualizations();
        }
      };
      reader.readAsBinaryString(input.files[0]);
    } else {
      alert('The File APIs are not fully supported in this browser.');
    }
  };

  function datasetChange() {
		var dataset = document.getElementById("datasets").value;
    window.localStorage.setItem('dataset', dataset);

    if (dataset === "custom") {
      d3.select("#customDataUpload").style("display", "inline");
    } else {
      d3.select("#customDataUpload").style("display", "none");
      document.getElementById("customDataset").value = "";
      removeAllVisualizations();		
      
      getDataset(dataset);
    }
  }
  
  function getDataset(dataset) {
    annotations = [];
    invalidObservations = [];
    sessions = [];
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
        var result = JSON.parse(this.responseText);
        console.log(result)
				rawData = result.data;
				for (annotation in result.annotations)
				{
					if (!(result.annotations[annotation].systemName in annotations)) {
						annotations[result.annotations[annotation].systemName] = [];
					}

					annotations[result.annotations[annotation].systemName].push({
						"comment": result.annotations[annotation].comment,
						"creationDate": result.annotations[annotation].creationDate,
						"type": result.annotations[annotation].type,
						"id": result.annotations[annotation].id
					});
        }
        
        for (observation in result.observations)
				{
					if (!(result.observations[observation].systemName in invalidObservations)) {
						invalidObservations[result.observations[observation].systemName] = [];
					}

					invalidObservations[result.observations[observation].systemName].push({
						"comment": result.observations[observation].comment,
						"creationDate": result.observations[observation].creationDate,
						"type": result.observations[observation].type,
						"id": result.observations[observation].id
					});
        }
        
        for (session in result.sessions) {
          sessions.push(result.sessions[session]);
        }

        var tz = getTimezone();
				data = processData(tz, rawData);
				createVisualizations();
			}
		};
		xmlhttp.open("GET", ("/datasets/"+dataset), true);
		xmlhttp.send();
  }

  function getTimezone() {
    var tz = window.localStorage.getItem('timezone');
    if (tz === null) {
      tz = "1";
    }
    return tz;
  }
</script>