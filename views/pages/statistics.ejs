<!DOCTYPE html>
<html lang="en">
<head>
	<% include ../partials/head %>
</head>
<body class="container">
	<header>
		<% include ../partials/header %>
	</header>
	<br>		
	<div class="row">
		<div class='col-sm-1'></div>
		<div class=''>
			<p class="h6">Date from:</p>
		</div>
		<div class='col-sm-3'>
			<p  class="h6"id="firstDate"></p>
		</div>
		<div class=''>
				<p class="h6">Date to:</p>
			</div>
		<div class='col-sm-4'>
			<p class="h6" id="lastDate"></p>
		</div>
	</div>
	<div class="row">
		<div class='col-sm-1 graph' id='dateChart'></div>
	</div>

	<div class="row">
		<div class="col">
			<div class='graph' id='dayBarChart'></div>
		</div>
		<div class="col">
			<div class='graph' id='hourBarChart'></div>
		</div>
	</div>
	<div class="row">
		<div class="col">
			<div class='graph' id='monthBarChart'></div>
		</div>
		<div class="col">
			<div class='graph' id='weekBarChart'></div>
		</div>
	</div>
	<br>
	<footer>
		<% include ../partials/footer %>
	</footer>

</body>
<% include ../partials/annotations %>
</html>

<script src="scripts/data-processing.js"></script>

<script type='text/javascript'>
	checkForChosenDataset();
	var childGraphs;
	var dataset = document.getElementById("datasets");
	var event = new Event('change');
	dataset.dispatchEvent(event);

	function removeAllVisualizations() {
		var graphs = document.getElementsByClassName("graph");
		for (var i in graphs) {				
			while (graphs[i].firstChild) {
				graphs[i].removeChild(graphs[i].firstChild);
			}
		}
	}

	function createVisualizations() {
		var firstDate = new Date(Date.UTC(data['firstYear'], data['firstMonth'], 1));
		var lastDate = new Date(Date.UTC(data['lastRecordedDay'].getUTCMonth() === 11 ? data['lastYear']+1 : data['lastYear'], data['lastRecordedDay'].getUTCMonth() === 11 ? 0 : (data['lastRecordedDay'].getUTCMonth()+1), 1));

		var dateChart = new DateBarChart(
			data['eachDay'],
			'dateChart', 
			1000,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per day", 
			[firstDate, lastDate],
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		dateChart.create("Day", "Observations", monthDiff(firstDate, lastDate));
		dateChart.createStackedBars();
		dateChart.addStackSwitch(true);
		dateChart.createBrush();

		var monthChart = new NormalBarChart(
			data['averageDayPerMonth'], 
			'monthBarChart', 
			data['byMonth'].length > 6 ? 1000 : 500,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Average observations per day each month", 
			data['averageDayPerMonth'], 
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		monthChart.create("Month", "Observations", data["maxAverageDayPerMonth"]);
		monthChart.addClickEventToUpdateDateChart(dateChart, 'month');
		
		var weekChart = new NormalBarChart(
			data['byWeek'], 
			'weekBarChart', 
			data['byMonth'].length > 6 ? 1000 : 500,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per week", 
			data['byWeek'], 
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		weekChart.create("", "Observations", -1);
		weekChart.addClickEventToUpdateDateChart(dateChart, 'week');
		weekChart.rotateTickLabels();

		var weekdayChart = new NormalBarChart(
			data['byAverageWeekday'], 
			'dayBarChart', 
			500,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Average observations per weekday",
			data['byAverageWeekday'], 
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		var maxAverageWeekday = parseInt(d3.max(data['averagePerWeekday']));
		weekdayChart.create("Weekday", "Observations", maxAverageWeekday < 10 ? maxAverageWeekday : -1);
		childGraphs.push(weekdayChart);
		weekdayChart.addClickEventToUpdateDateChart(dateChart, 'weekday');
		
		var hourChart = new TimeBarChart(
			data['byHour'],
			'hourBarChart',
			500,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per hour",
			[0,24],
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
			
		hourChart.create("Hour", "Observations", -1);
		childGraphs.push(hourChart);
	}

	function updateChildGraphs(firstDate, lastDate) {
		firstDate.setUTCHours(0,0,0,0);
		lastDate.setUTCHours(23,59,59);
		document.getElementById("firstDate").innerHTML = weekday[firstDate.getUTCDay() === 0 ? 6 : (firstDate.getUTCDay()-1)] + " " + month[firstDate.getUTCMonth()] + " " + firstDate.getUTCDate() + " " + firstDate.getUTCFullYear();
		document.getElementById("lastDate").innerHTML = weekday[lastDate.getUTCDay() === 0 ? 6 : (lastDate.getUTCDay()-1)] + " " + month[lastDate.getUTCMonth()] + " " + lastDate.getUTCDate() + " " + lastDate.getUTCFullYear();
		var timezone = document.getElementById("timezone").value;
		if (childGraphs.length > 0) {
			var countWeekday = [];
			var countHour = [];

			for (var i=0; i<24;i++) {
				countHour[i] = 0;
			}

			for (var instance in rawData) {
				var date = Object.keys(rawData[instance])[0]
				if (date !== "date") {
					continue;
				}

				var isoDate = strictIsoParse(rawData[instance][date]);

				if (timezone === "2" && "timezone" in rawData[instance]) {
					var tzString = rawData[instance]["timezone"];
					if (tzString.includes("+")) {
						isoDate.setUTCHours(isoDate.getUTCHours() + parseInt(tzString.slice(1,3)));
					} else if (tzString.includes("-")) {
						isoDate.setUTCHours(isoDate.getUTCHours() - parseInt(tzString.slice(1,3)));
					}
				}

				if (timezone === "1") {
					thisTZDate = new Date(isoDate.getTime())
					isoDate.setUTCMinutes(isoDate.getUTCMinutes() + (-1*thisTZDate.getTimezoneOffset()));
				}
				if (firstDate > isoDate || lastDate < isoDate) {
					continue;
				}

				var dayOfMonth = isoDate.getUTCFullYear() + "-" + (isoDate.getUTCMonth()+1) + "-" + isoDate.getUTCDate();
        		var hourOfDay = dayOfMonth + "-" +isoDate.getUTCHours();
				if (dayOfMonth in invalidObservations
					|| hourOfDay in invalidObservations) {
					continue;
				}

				var currentDay = isoDate.getUTCDay() === 0 ? weekday[6] : weekday[(isoDate.getUTCDay()-1)];            
				sumData(currentDay, countWeekday);

				sumData(isoDate.getUTCHours(), countHour);
			}
			
			var weekdayData = createBarData(countWeekday);
			
			var maxVal = 0;
			for (var i in countWeekday) {
				if (countWeekday[i] > maxVal) {
					maxVal = countWeekday[i];
				}
			}

			childGraphs[0].yTicks = maxVal;
			childGraphs[0].updateGraph(weekdayData);
			var hourData = createBarData(countHour);
			childGraphs[1].yTicks = d3.max(countHour);
			childGraphs[1].updateGraph(hourData);

		}
	}

	function getSpecificWeekdayData(day) {
		var days = [];
		for (var instance in rawData) {
			var date = Object.keys(rawData[instance])[0]
			if (date !== "date") {
				continue;
			}
			
			var isoDate = strictIsoParse(rawData[instance][date]);

			var dayOfMonth = isoDate.getUTCFullYear() + "-" + (isoDate.getUTCMonth()+1) + "-" + isoDate.getUTCDate();
			var hourOfDay = dayOfMonth + "-" +isoDate.getUTCHours();
			if (dayOfMonth in invalidObservations
				|| hourOfDay in invalidObservations) {
				continue;
			}

			var isoDay = isoDate.getUTCDay() === 0 ? 6 : isoDate.getUTCDay()-1;
			if (isoDay === day) {
				days.push(isoDate);
			}
		}
		return days;
	}

	function updateChildGraphsWithWeekdayData(weekdayIndex) {
		document.getElementById("firstDate").innerHTML = "All " + weekday[weekdayIndex] + "s";
		document.getElementById("lastDate").innerHTML = "All " + weekday[weekdayIndex] + "s";
		if (childGraphs.length > 0) {
			var countWeekday = [];
			var countHour = [];

			for (var i=0; i<24;i++) {
				countHour[i] = 0;
			}

			for (var instance in rawData) {
				var date = Object.keys(rawData[instance])[0]
				if (date !== "date") {
					continue;
				}

				var isoDate = strictIsoParse(rawData[instance][date]);

				var dayOfMonth = isoDate.getUTCFullYear() + "-" + (isoDate.getUTCMonth()+1) + "-" + isoDate.getUTCDate();
        		var hourOfDay = dayOfMonth + "-" +isoDate.getUTCHours();
				if (dayOfMonth in invalidObservations
					|| hourOfDay in invalidObservations) {
					continue;
				}

				var isoDay = isoDate.getUTCDay() === 0 ? 6 : isoDay = isoDate.getUTCDay()-1;

				if (weekdayIndex !== isoDay) {
					continue;
				}

				var currentDay = weekday[isoDay];
				
				sumData(currentDay, countWeekday);

				sumData(isoDate.getUTCHours(), countHour);
			}

			var weekdayData = createBarData(countWeekday);
			
			var maxVal = 0;
			for (var i in countWeekday) {
				if (countWeekday[i] > maxVal) {
					maxVal = countWeekday[i];
				}
			}

			childGraphs[0].yTicks = maxVal;
			childGraphs[0].updateGraph(weekdayData);
			var hourData = createBarData(countHour);
			childGraphs[1].yTicks = d3.max(countHour);
			childGraphs[1].updateGraph(hourData);
		}
	}
</script>