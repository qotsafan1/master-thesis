<!DOCTYPE html>
<html lang="en">
<head>
	<% include ../partials/head %>
</head>
<body class="container">

	<header>
		<% include ../partials/header %>
	</header>
	<div class="row" id="colorScales">
		
	</div>
	
	<div class="row">
		<div class="col-lg-5">
			<div class="row">
				<table id="calendar"></table>
			</div>
			<div id="informationPanel">
				<div id="minuteBreakdown"></div>
				<table id="trivia"></table>			
				<p class="detail" id="averageDay"></p>
				<p class="detail" id="averageWorkday"></p>
				<p class="detail" id="averagePerWeekday"></p>
				<p class="detail" id="averageHourPerWeekday"></p>
			</div>
		</div>
		<div class="col-lg-7">
			<table id="timetable"></table>
		</div>
	</div>
	<div id="dayComparisonChart" class="row graph">
	</div>
	<div class="row">		
		<div class="col">
			<div class='graph' id='weekComparison'></div>
		</div>
	</div>
	<div class="row" id="comparableWeeks">		
		<div class="col">
			<div class='graph' id='weekBarChart'></div>
		</div>
	</div>
	<br>
	<div class="row" id="dataComparison">
		<div class="col">
			<h3 id="leftTriviaLabel"></h3>
			<table id="triviaLeft"></table>	
		</div>
		<div class="col">
			<h3 id="rightTriviaLabel"></h3>
			<table id="triviaRight"></table>	
		</div>
	</div>
	<div class="row">
		<div class="col">
			<div id="weekdayChartLeft"></div>
		</div>
		<div class="col">
			<div id="weekdayChartRight"></div>
		</div>
	</div>
	<div class="row">
		<div class="col">
			<div id="hourChartLeft"></div>
		</div>
		<div class="col">
			<div id="hourChartRight"></div>
		</div>
	</div>
	<br>
	<footer>
		<% include ../partials/footer %>
	</footer>

</body>
<% include ../partials/annotations %>
</html>

<script src="scripts/data-processing.js"></script>

<script type='text/javascript'>	
	var childGraphs;
	var currentDayComparisonChart;
	var weekDayComparisonChart;
	var monthComparisonChart;

	checkForChosenDataset();

	var dataset = document.getElementById("datasets");
	var event = new Event('change');
	dataset.dispatchEvent(event);

	function removeAllVisualizations() {
		var graphs = document.getElementsByClassName("graph");
		for (var i in graphs) {				
			while (graphs[i].firstChild) {
				graphs[i].removeChild(graphs[i].firstChild);
			}
		}

		var calendar = document.getElementById("calendar");			
		while (calendar.firstChild) {
			calendar.removeChild(calendar.firstChild);
		}

		var timetable = document.getElementById("timetable");			
		while (timetable.firstChild) {
			timetable.removeChild(timetable.firstChild);
		}

		var barChartBreakdown = document.getElementById("minuteBreakdown");			
		while (barChartBreakdown.firstChild) {
			barChartBreakdown.removeChild(barChartBreakdown.firstChild);
		}

		var graphs = document.getElementsByClassName("graph");
		for (var i in graphs) {				
			while (graphs[i].firstChild) {
				graphs[i].removeChild(graphs[i].firstChild);
			}
		}

		var colorScales = document.getElementById("colorScales");			
		while (colorScales.firstChild) {
			colorScales.removeChild(colorScales.firstChild);
		}

		var trivia = document.getElementById("trivia");			
		while (trivia.firstChild) {
			trivia.removeChild(trivia.firstChild);
		}

		removeComparisonData();
		
		document.getElementById("averageHourPerWeekday").innerText = "";
	}	

	function createVisualizations() {
		var triviaTable = d3.select("#trivia");
		for (var i in data['trivia']) {
			var triviaRow = triviaTable.append("tr");
			triviaRow.append("td").attr("class", "table-key").text(data['trivia'][i].key);
			triviaRow.append("td").attr("class", "table-value").text(data['trivia'][i].value);
		}

		var calendarObject = new Calendar(data['lastRecordedDay'], data['sumOfEachDay'], data['mostInADay'], data);
		calendarObject.create();
		calendarObject.addDistribution();

		var timetableObject = new TimeTable(data['lastRecordedDay'], calendarObject.week, data['hourByDay'], calendarObject.month, calendarObject.year, data['maxHourOfDay']);
		timetableObject.create();        

		calendarObject.timeTable = timetableObject;
		timetableObject.calendar = calendarObject;
/*
		var informationPanel = new InformationPanel(data);
		informationPanel.setAverageWorkday();
		informationPanel.setChosenWeekdayAverage(data['lastRecordedDay'].getUTCDay());


		calendarObject.informationPanel = informationPanel;
		timetableObject.informationPanel = informationPanel;
*/

		var dayComparisonChart = new ComparisonChart(			
			'dayComparisonChart', 
			250, 
			70,
			{top: 30, right: 5, bottom: 5, left: 5},
			"Weekday vs. weekend day",
			{
				"xBarFontSize": "12px",
				"titleFontSize": "13px"
			}
		);
		dayComparisonChart.compare(
			data["averageWorkday"],
			data["averageWeekend"],
			"Weekday",
			"Weekend"
		);

		currentDayComparisonChart = new ComparisonChart(			
			'dayComparisonChart', 
			250, 
			70,
			{top: 30, right: 5, bottom: 5, left: 5},
			"Chosen day vs. overall",
			{
				"xBarFontSize": "12px",
				"titleFontSize": "13px"
			}
		);
		currentDayComparisonChart.compare(
			data["sumOfEachDay"][data["lastRecordedDay"].getUTCFullYear() + "-" + (data["lastRecordedDay"].getUTCMonth()+1) + "-" + data["lastRecordedDay"].getUTCDate()],
			data["averageDay"],
			"Chosen day",
			"Overall average day"
		);

		var day = data["lastRecordedDay"].getUTCDay() === 0 ? 6 : (data["lastRecordedDay"].getUTCDay()-1);
		weekDayComparisonChart = new ComparisonChart(			
			'dayComparisonChart', 
			250, 
			70,
			{top: 30, right: 5, bottom: 5, left: 5},
			("Average " + weekday[day] + " vs. chosen " + weekday[day]),
			{
				"xBarFontSize": "12px",
				"titleFontSize": "13px"
			}
		);

		weekDayComparisonChart.compare(
			data["sumOfEachDay"][data["lastRecordedDay"].getUTCFullYear() + "-" + (data["lastRecordedDay"].getUTCMonth()+1) + "-" + data["lastRecordedDay"].getUTCDate()],
			data["averagePerWeekday"][day],
			("Chosen " + weekday[day]),
			("Average " + weekday[day])
		);

		monthComparisonChart = new ComparisonChart(			
			'dayComparisonChart', 
			250, 
			70,
			{top: 30, right: 5, bottom: 5, left: 5},
			("Average day vs. average day in chosen month"),
			{
				"xBarFontSize": "12px",
				"titleFontSize": "13px"
			}
		);

		monthComparisonChart.compare(
			data["averageDay"],
			data["averageDayEachMonth"][month[data["lastRecordedDay"].getUTCMonth()]],
			("Average day overall"),
			("Average day in " + month[data["lastRecordedDay"].getUTCMonth()])
		);


		new ColorScaleLegend(calendarObject.colorScale, "Color scale for days");
		new ColorScaleLegend(timetableObject.colorScale, "Color scale for hours");

		var weekComparison = new NormalBarChart(
			data['comparingWeeks'], 
			'weekComparison', 
			1000,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Comparing weeks", 
			data['comparingWeeks'], 
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		weekComparison.create("", "Observations", -1);

		var weekChart = new NormalBarChart(
			data['byWeek'], 
			'weekBarChart', 
			1000,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per week", 
			data['byWeek'], 
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		weekChart.create("", "Observations", -1);
		weekChart.rotateTickLabels();
		
		var brushObjects = weekChart.createCustomBrush();
		weekChart.rightBrushG = brushObjects[0];
		weekChart.rightBrush = brushObjects[1];
		weekChart.setBrushPosition(weekChart.rightBrushG, weekChart.rightBrush, 1);

		var brushObjects = weekChart.createCustomBrush();
		weekChart.leftBrushG = brushObjects[0];
		weekChart.leftBrush = brushObjects[1];
		weekChart.setBrushPosition(weekChart.leftBrushG, weekChart.leftBrush, 3);

	}

	function updateAverages(date) {
		var dayString = date.getUTCFullYear() + "-" + (date.getUTCMonth()+1) + "-" + date.getUTCDate();
		var day = date.getUTCDay() === 0 ? 6 : (date.getUTCDay()-1);
		var monthNumber = date.getUTCMonth();
		if (dayString in data["sumOfEachDay"]) {
			currentDayComparisonChart.update(
				data["sumOfEachDay"][dayString],
				data["averageDay"],
				"Chosen day",
				"Overall average day"
			);
			
			weekDayComparisonChart.update(
				data["sumOfEachDay"][dayString],
				data["averagePerWeekday"][day],
				("Chosen " + weekday[day]),
				("Average " + weekday[day])
			);			
		} else {
			currentDayComparisonChart.update(
				0,
				data["averageDay"],
				"Chosen day",
				"Overall average day"
			);

			weekDayComparisonChart.update(
				0,
				data["averagePerWeekday"][day],
				("Chosen " + weekday[day]),
				("Average " + weekday[day])
			);
		}
		weekDayComparisonChart.updateTitle(("Average " + weekday[day] + " vs. chosen " + weekday[day]));

		var averageInMonth = 0;
		if (month[monthNumber] in data["averageDayEachMonth"]) {
			averageInMonth = data["averageDayEachMonth"][month[monthNumber]]
		}

		monthComparisonChart.update(
			data["averageDay"],
			averageInMonth,
			("Average day overall"),
			("Average day in " + month[monthNumber])
		);
	}

	function createWeekComparison(leftWeeks, rightWeeks) {
		if (!leftWeeks.length || !rightWeeks.length) {
			return;
		}		
		removeComparisonData();

		allLeftWeeks = [];
		for (var i in leftWeeks) {
			if (leftWeeks[i] in data["recordsEachWeek"]) {
				allLeftWeeks = allLeftWeeks.concat(data["recordsEachWeek"][leftWeeks[i]]);
			}
		}
		
		allRightWeeks = [];
		for (var i in rightWeeks) {
			if (rightWeeks[i] in data["recordsEachWeek"]) {
				allRightWeeks = allRightWeeks.concat(data["recordsEachWeek"][rightWeeks[i]]);
			}
		}

		var leftData = processData(timezone, allLeftWeeks);
		var rightData = processData(timezone, allRightWeeks);

		var triviaTableLeft = d3.select("#triviaLeft");
		for (var i in leftData['trivia']) {
			var triviaRow = triviaTableLeft.append("tr");
			triviaRow.append("td").attr("class", "table-key").text(leftData['trivia'][i].key);
			triviaRow.append("td").attr("class", "table-value").text(leftData['trivia'][i].value);
		}

		var triviaTableRight = d3.select("#triviaRight");
		for (var i in rightData['trivia']) {
			var triviaRow = triviaTableRight.append("tr");
			triviaRow.append("td").attr("class", "table-key").text(rightData['trivia'][i].key);
			triviaRow.append("td").attr("class", "table-value").text(rightData['trivia'][i].value);
		}

		if (leftWeeks.length === 1) {
			document.getElementById("leftTriviaLabel").innerText = "Week " + leftWeeks[0];
		} else {
			document.getElementById("leftTriviaLabel").innerText = "Week " + leftWeeks[0] + " - " + leftWeeks[leftWeeks.length-1];
		}

		if (rightWeeks.length === 1) {
			document.getElementById("rightTriviaLabel").innerText = "Week " + rightWeeks[0];
		} else {
			document.getElementById("rightTriviaLabel").innerText = "Week " + rightWeeks[0] + " - " + rightWeeks[rightWeeks.length-1];
		}

		var weekdayChartLeft = new NormalBarChart(
			leftData['byDay'], 
			'weekdayChartLeft', 
			500, 
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per weekday",
			leftData['byDay'], 
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		weekdayChartLeft.create(
			"Weekday", 
			"Observations", 
			leftData['mostInADay'] < 10 ? 
				leftData['mostInADay'] : -1
		);

		var weekdayChartRight = new NormalBarChart(
			rightData['byDay'], 
			'weekdayChartRight', 
			500, 
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per weekday",
			rightData['byDay'], 
			'default',
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
		weekdayChartRight.create(
			"Weekday", 
			"Observations", 
			rightData['mostInADay'] < 10 ? 
				rightData['mostInADay'] : -1
		);

		var hourChartLeft = new TimeBarChart(
			leftData['byHour'],
			'hourChartLeft',
			500,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per hour",
			[0,24],
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
			
		hourChartLeft.create(
			"Hour",
			"Observations",
			leftData['maxHourOverAllWeeks'] < 10 ? 
				leftData['maxHourOverAllWeeks'] : -1	
		);

		var hourChartRight = new TimeBarChart(
			rightData['byHour'],
			'hourChartRight',
			500,
			250,
			{top: 40, right: 60, bottom: 40, left: 40},
			"Observations per hour",
			[0,24],
			true,
			{
				"xBarFontSize": "12px",
				"titleFontSize": "15px"
			}
		);
			
		hourChartRight.create(
			"Hour",
			"Observations",
			rightData['maxHourOverAllWeeks'] < 10 ? 
				rightData['maxHourOverAllWeeks'] : -1
		);
	}

	function removeComparisonData() {
		var trivia = document.getElementById("triviaRight");		
		while (trivia.firstChild) {
			trivia.removeChild(trivia.firstChild);
		}

		var trivia = document.getElementById("triviaLeft");		
		while (trivia.firstChild) {
			trivia.removeChild(trivia.firstChild);
		}
		
		var rightWeekChart = document.getElementById("weekdayChartRight");		
		while (rightWeekChart.firstChild) {
			rightWeekChart.removeChild(rightWeekChart.firstChild);
		}

		var leftWeekChart = document.getElementById("weekdayChartLeft");		
		while (leftWeekChart.firstChild) {
			leftWeekChart.removeChild(leftWeekChart.firstChild);
		}

		var hourChartRight = document.getElementById("hourChartRight");		
		while (hourChartRight.firstChild) {
			hourChartRight.removeChild(hourChartRight.firstChild);
		}

		var hourChartRight = document.getElementById("hourChartLeft");		
		while (hourChartRight.firstChild) {
			hourChartRight.removeChild(hourChartRight.firstChild);
		}

		document.getElementById("leftTriviaLabel").innerText = "";
		document.getElementById("rightTriviaLabel").innerText = "";
	}
</script>